// tslint:disable
/**
 * iQueue
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as globalImportUrl from 'url'
import type { AxiosInstance, AxiosPromise } from 'axios'
import globalAxios from 'axios'
import type { Configuration } from '../configuration'
// Some imports not used depending on template conditions
// @ts-expect-error
import type { RequestArgs } from '../base'
import { BASE_PATH, BaseAPI, COLLECTION_FORMATS, RequiredError } from '../base'
// @ts-expect-error
import type { InlineObject5 } from '../models'
// @ts-expect-error
import type { InlineResponse2003 } from '../models'
// @ts-expect-error
import type { InlineResponse2012 } from '../models'
// @ts-expect-error
import type { InlineResponse401 } from '../models'
// @ts-expect-error
import type { QueueTicket } from '../models'
/**
 * QueueApi - axios parameter creator
 * @export
 */
export const QueueApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
         *
         * @summary Checkin for customer
         * @param {string} [ticketId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    queueCheckinPost: async (ticketId?: string, options: any = {}): Promise<RequestArgs> => {
      const localVarPath = '/queue/checkin'
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration)
        baseOptions = configuration.baseOptions

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (ticketId !== undefined)
        localVarQueryParameter.ticketId = ticketId

      localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
         *
         * @summary Get Queue Info
         * @param {number} [ticketId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    queuesGet: async (ticketId?: number, options: any = {}): Promise<RequestArgs> => {
      const localVarPath = '/queues'
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration)
        baseOptions = configuration.baseOptions

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (ticketId !== undefined)
        localVarQueryParameter.ticketId = ticketId

      localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
         * 1. get tickets by storeId: 用户获取某家商店的排队信息 2. get tickets by userId：用户获取自己的所有取号的 ticket 信息 3. get tickets by userId & storeId：用户获取自己取号的某家商店的 ticket 信息
         * @summary Get Queue Tickets
         * @param {number} [userId]
         * @param {string} [storeId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    ticketsGet: async (userId?: number, storeId?: string, options: any = {}): Promise<RequestArgs> => {
      const localVarPath = '/tickets'
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration)
        baseOptions = configuration.baseOptions

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (userId !== undefined)
        localVarQueryParameter.userId = userId

      if (storeId !== undefined)
        localVarQueryParameter.storeId = storeId

      localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
         *
         * @summary Create Queue Ticket
         * @param {InlineObject5} [inlineObject5]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    ticketsPost: async (inlineObject5?: InlineObject5, options: any = {}): Promise<RequestArgs> => {
      const localVarPath = '/tickets'
      const localVarUrlObj = globalImportUrl.parse(localVarPath, true)
      let baseOptions
      if (configuration)
        baseOptions = configuration.baseOptions

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query }
      // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
      delete localVarUrlObj.search
      const headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      const needsSerialization = (typeof inlineObject5 !== 'string') || localVarRequestOptions.headers['Content-Type'] === 'application/json'
      localVarRequestOptions.data = needsSerialization ? JSON.stringify(inlineObject5 !== undefined ? inlineObject5 : {}) : (inlineObject5 || '')

      return {
        url: globalImportUrl.format(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * QueueApi - functional programming interface
 * @export
 */
export const QueueApiFp = function (configuration?: Configuration) {
  return {
    /**
         *
         * @summary Checkin for customer
         * @param {string} [ticketId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    async queueCheckinPost(ticketId?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse401>> {
      const localVarAxiosArgs = await QueueApiAxiosParamCreator(configuration).queueCheckinPost(ticketId, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @summary Get Queue Info
         * @param {number} [ticketId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    async queuesGet(ticketId?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2003>> {
      const localVarAxiosArgs = await QueueApiAxiosParamCreator(configuration).queuesGet(ticketId, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         * 1. get tickets by storeId: 用户获取某家商店的排队信息 2. get tickets by userId：用户获取自己的所有取号的 ticket 信息 3. get tickets by userId & storeId：用户获取自己取号的某家商店的 ticket 信息
         * @summary Get Queue Tickets
         * @param {number} [userId]
         * @param {string} [storeId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    async ticketsGet(userId?: number, storeId?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<QueueTicket>>> {
      const localVarAxiosArgs = await QueueApiAxiosParamCreator(configuration).ticketsGet(userId, storeId, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url }
        return axios.request(axiosRequestArgs)
      }
    },
    /**
         *
         * @summary Create Queue Ticket
         * @param {InlineObject5} [inlineObject5]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    async ticketsPost(inlineObject5?: InlineObject5, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2012>> {
      const localVarAxiosArgs = await QueueApiAxiosParamCreator(configuration).ticketsPost(inlineObject5, options)
      return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
        const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url }
        return axios.request(axiosRequestArgs)
      }
    },
  }
}

/**
 * QueueApi - factory interface
 * @export
 */
export const QueueApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  return {
    /**
         *
         * @summary Checkin for customer
         * @param {string} [ticketId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    queueCheckinPost(ticketId?: string, options?: any): AxiosPromise<InlineResponse401> {
      return QueueApiFp(configuration).queueCheckinPost(ticketId, options).then(request => request(axios, basePath))
    },
    /**
         *
         * @summary Get Queue Info
         * @param {number} [ticketId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    queuesGet(ticketId?: number, options?: any): AxiosPromise<InlineResponse2003> {
      return QueueApiFp(configuration).queuesGet(ticketId, options).then(request => request(axios, basePath))
    },
    /**
         * 1. get tickets by storeId: 用户获取某家商店的排队信息 2. get tickets by userId：用户获取自己的所有取号的 ticket 信息 3. get tickets by userId & storeId：用户获取自己取号的某家商店的 ticket 信息
         * @summary Get Queue Tickets
         * @param {number} [userId]
         * @param {string} [storeId]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    ticketsGet(userId?: number, storeId?: string, options?: any): AxiosPromise<Array<QueueTicket>> {
      return QueueApiFp(configuration).ticketsGet(userId, storeId, options).then(request => request(axios, basePath))
    },
    /**
         *
         * @summary Create Queue Ticket
         * @param {InlineObject5} [inlineObject5]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
    ticketsPost(inlineObject5?: InlineObject5, options?: any): AxiosPromise<InlineResponse2012> {
      return QueueApiFp(configuration).ticketsPost(inlineObject5, options).then(request => request(axios, basePath))
    },
  }
}

/**
 * QueueApi - interface
 * @export
 * @interface QueueApi
 */
export interface QueueApiInterface {
  /**
     *
     * @summary Checkin for customer
     * @param {string} [ticketId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueueApiInterface
     */
  queueCheckinPost(ticketId?: string, options?: any): AxiosPromise<InlineResponse401>

  /**
     *
     * @summary Get Queue Info
     * @param {number} [ticketId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueueApiInterface
     */
  queuesGet(ticketId?: number, options?: any): AxiosPromise<InlineResponse2003>

  /**
     * 1. get tickets by storeId: 用户获取某家商店的排队信息 2. get tickets by userId：用户获取自己的所有取号的 ticket 信息 3. get tickets by userId & storeId：用户获取自己取号的某家商店的 ticket 信息
     * @summary Get Queue Tickets
     * @param {number} [userId]
     * @param {string} [storeId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueueApiInterface
     */
  ticketsGet(userId?: number, storeId?: string, options?: any): AxiosPromise<Array<QueueTicket>>

  /**
     *
     * @summary Create Queue Ticket
     * @param {InlineObject5} [inlineObject5]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueueApiInterface
     */
  ticketsPost(inlineObject5?: InlineObject5, options?: any): AxiosPromise<InlineResponse2012>

}

/**
 * QueueApi - object-oriented interface
 * @export
 * @class QueueApi
 * @extends {BaseAPI}
 */
export class QueueApi extends BaseAPI implements QueueApiInterface {
  /**
     *
     * @summary Checkin for customer
     * @param {string} [ticketId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueueApi
     */
  public queueCheckinPost(ticketId?: string, options?: any) {
    return QueueApiFp(this.configuration).queueCheckinPost(ticketId, options).then(request => request(this.axios, this.basePath))
  }

  /**
     *
     * @summary Get Queue Info
     * @param {number} [ticketId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueueApi
     */
  public queuesGet(ticketId?: number, options?: any) {
    return QueueApiFp(this.configuration).queuesGet(ticketId, options).then(request => request(this.axios, this.basePath))
  }

  /**
     * 1. get tickets by storeId: 用户获取某家商店的排队信息 2. get tickets by userId：用户获取自己的所有取号的 ticket 信息 3. get tickets by userId & storeId：用户获取自己取号的某家商店的 ticket 信息
     * @summary Get Queue Tickets
     * @param {number} [userId]
     * @param {string} [storeId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueueApi
     */
  public ticketsGet(userId?: number, storeId?: string, options?: any) {
    return QueueApiFp(this.configuration).ticketsGet(userId, storeId, options).then(request => request(this.axios, this.basePath))
  }

  /**
     *
     * @summary Create Queue Ticket
     * @param {InlineObject5} [inlineObject5]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueueApi
     */
  public ticketsPost(inlineObject5?: InlineObject5, options?: any) {
    return QueueApiFp(this.configuration).ticketsPost(inlineObject5, options).then(request => request(this.axios, this.basePath))
  }
}
