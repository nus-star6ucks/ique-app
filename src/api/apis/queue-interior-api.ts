// tslint:disable
/**
 * iQueue
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { InlineResponse2013 } from '../models';
// @ts-ignore
import { InlineResponse401 } from '../models';
// @ts-ignore
import { QueueInfo } from '../models';
// @ts-ignore
import { SeatType } from '../models';
/**
 * QueueInteriorApi - axios parameter creator
 * @export
 */
export const QueueInteriorApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * （SMS调用QMS）用户未取号，获取当前 store 所有 queue 的 waiting size
         * @summary Get Queue Info Detail
         * @param {number} queueId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queuesQueueIdGet: async (queueId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'queueId' is not null or undefined
            if (queueId === null || queueId === undefined) {
                throw new RequiredError('queueId','Required parameter queueId was null or undefined when calling queuesQueueIdGet.');
            }
            const localVarPath = `/queues/{queueId}`
                .replace(`{${"queueId"}}`, encodeURIComponent(String(queueId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * sms.startService() ---> qms.createQueues()
         * @summary Create Queues
         * @param {Array<SeatType>} [seatType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queuesStartPost: async (seatType?: Array<SeatType>, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/queues/start`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof seatType !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(seatType !== undefined ? seatType : {}) : (seatType || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * sms.stopService() ---> qms.deleteQueues()
         * @summary Delete Queues
         * @param {Array<number>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queuesStopPost: async (requestBody?: Array<number>, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/queues/stop`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof requestBody !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(requestBody !== undefined ? requestBody : {}) : (requestBody || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * QueueInteriorApi - functional programming interface
 * @export
 */
export const QueueInteriorApiFp = function(configuration?: Configuration) {
    return {
        /**
         * （SMS调用QMS）用户未取号，获取当前 store 所有 queue 的 waiting size
         * @summary Get Queue Info Detail
         * @param {number} queueId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async queuesQueueIdGet(queueId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QueueInfo>> {
            const localVarAxiosArgs = await QueueInteriorApiAxiosParamCreator(configuration).queuesQueueIdGet(queueId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * sms.startService() ---> qms.createQueues()
         * @summary Create Queues
         * @param {Array<SeatType>} [seatType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async queuesStartPost(seatType?: Array<SeatType>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<InlineResponse2013>>> {
            const localVarAxiosArgs = await QueueInteriorApiAxiosParamCreator(configuration).queuesStartPost(seatType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * sms.stopService() ---> qms.deleteQueues()
         * @summary Delete Queues
         * @param {Array<number>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async queuesStopPost(requestBody?: Array<number>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await QueueInteriorApiAxiosParamCreator(configuration).queuesStopPost(requestBody, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * QueueInteriorApi - factory interface
 * @export
 */
export const QueueInteriorApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * （SMS调用QMS）用户未取号，获取当前 store 所有 queue 的 waiting size
         * @summary Get Queue Info Detail
         * @param {number} queueId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queuesQueueIdGet(queueId: number, options?: any): AxiosPromise<QueueInfo> {
            return QueueInteriorApiFp(configuration).queuesQueueIdGet(queueId, options).then((request) => request(axios, basePath));
        },
        /**
         * sms.startService() ---> qms.createQueues()
         * @summary Create Queues
         * @param {Array<SeatType>} [seatType] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queuesStartPost(seatType?: Array<SeatType>, options?: any): AxiosPromise<Array<InlineResponse2013>> {
            return QueueInteriorApiFp(configuration).queuesStartPost(seatType, options).then((request) => request(axios, basePath));
        },
        /**
         * sms.stopService() ---> qms.deleteQueues()
         * @summary Delete Queues
         * @param {Array<number>} [requestBody] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queuesStopPost(requestBody?: Array<number>, options?: any): AxiosPromise<object> {
            return QueueInteriorApiFp(configuration).queuesStopPost(requestBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * QueueInteriorApi - object-oriented interface
 * @export
 * @class QueueInteriorApi
 * @extends {BaseAPI}
 */
export class QueueInteriorApi extends BaseAPI {
    /**
     * （SMS调用QMS）用户未取号，获取当前 store 所有 queue 的 waiting size
     * @summary Get Queue Info Detail
     * @param {number} queueId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueueInteriorApi
     */
    public queuesQueueIdGet(queueId: number, options?: any) {
        return QueueInteriorApiFp(this.configuration).queuesQueueIdGet(queueId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * sms.startService() ---> qms.createQueues()
     * @summary Create Queues
     * @param {Array<SeatType>} [seatType] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueueInteriorApi
     */
    public queuesStartPost(seatType?: Array<SeatType>, options?: any) {
        return QueueInteriorApiFp(this.configuration).queuesStartPost(seatType, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * sms.stopService() ---> qms.deleteQueues()
     * @summary Delete Queues
     * @param {Array<number>} [requestBody] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueueInteriorApi
     */
    public queuesStopPost(requestBody?: Array<number>, options?: any) {
        return QueueInteriorApiFp(this.configuration).queuesStopPost(requestBody, options).then((request) => request(this.axios, this.basePath));
    }

}
