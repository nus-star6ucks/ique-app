// tslint:disable
/**
 * iQueue
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { InlineResponse401 } from '../models';
// @ts-ignore
import { Report } from '../models';
/**
 * ReportApi - axios parameter creator
 * @export
 */
export const ReportApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get Reports
         * @param {number} merchantId 
         * @param {number} storeId 
         * @param {number} [reportId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportsGet: async (merchantId: number, storeId: number, reportId?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'merchantId' is not null or undefined
            if (merchantId === null || merchantId === undefined) {
                throw new RequiredError('merchantId','Required parameter merchantId was null or undefined when calling reportsGet.');
            }
            // verify required parameter 'storeId' is not null or undefined
            if (storeId === null || storeId === undefined) {
                throw new RequiredError('storeId','Required parameter storeId was null or undefined when calling reportsGet.');
            }
            const localVarPath = `/reports`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (merchantId !== undefined) {
                localVarQueryParameter['merchantId'] = merchantId;
            }

            if (storeId !== undefined) {
                localVarQueryParameter['storeId'] = storeId;
            }

            if (reportId !== undefined) {
                localVarQueryParameter['reportId'] = reportId;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReportApi - functional programming interface
 * @export
 */
export const ReportApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get Reports
         * @param {number} merchantId 
         * @param {number} storeId 
         * @param {number} [reportId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reportsGet(merchantId: number, storeId: number, reportId?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Report>>> {
            const localVarAxiosArgs = await ReportApiAxiosParamCreator(configuration).reportsGet(merchantId, storeId, reportId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ReportApi - factory interface
 * @export
 */
export const ReportApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Get Reports
         * @param {number} merchantId 
         * @param {number} storeId 
         * @param {number} [reportId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reportsGet(merchantId: number, storeId: number, reportId?: number, options?: any): AxiosPromise<Array<Report>> {
            return ReportApiFp(configuration).reportsGet(merchantId, storeId, reportId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ReportApi - interface
 * @export
 * @interface ReportApi
 */
export interface ReportApiInterface {
    /**
     * 
     * @summary Get Reports
     * @param {number} merchantId 
     * @param {number} storeId 
     * @param {number} [reportId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportApiInterface
     */
    reportsGet(merchantId: number, storeId: number, reportId?: number, options?: any): AxiosPromise<Array<Report>>;

}

/**
 * ReportApi - object-oriented interface
 * @export
 * @class ReportApi
 * @extends {BaseAPI}
 */
export class ReportApi extends BaseAPI implements ReportApiInterface {
    /**
     * 
     * @summary Get Reports
     * @param {number} merchantId 
     * @param {number} storeId 
     * @param {number} [reportId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReportApi
     */
    public reportsGet(merchantId: number, storeId: number, reportId?: number, options?: any) {
        return ReportApiFp(this.configuration).reportsGet(merchantId, storeId, reportId, options).then((request) => request(this.axios, this.basePath));
    }

}
